import * as SQLite from 'expo-sqlite';
import { File } from 'expo-file-system';
import { Asset } from 'expo-asset';

const sqlAssets = [
    Asset.fromModule(require('@/database/migrations/000-schema.sql')),
    Asset.fromModule(require('@/database/migrations/001-migration1.sql')),
    Asset.fromModule(require('@/database/migrations/002-migration2.sql')),
];

export async function runMigrations(db: SQLite.SQLiteDatabase): Promise<void> {
    try {
        console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');
        await Promise.all(sqlAssets.map(asset => asset.downloadAsync()));
        for (const asset of sqlAssets) {
            console.log(`üîß –í—ã–ø–æ–ª–Ω—è–µ–º ${asset.name}...`);
            await executeSqlFile(db, asset.localUri!);
        }
        console.log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
        throw error;
    }
}

async function executeSqlFile(db: SQLite.SQLiteDatabase, fileUri: string): Promise<void> {
    try {
        const file = new File(fileUri);
        const sqlContent = await file.text()
        if (sqlContent) db.execSync(sqlContent);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL —Ñ–∞–π–ª–∞:', error);
        throw error;
    }
}