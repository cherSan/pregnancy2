import * as SQLite from 'expo-sqlite';

const schemaSql = require('./schema.sql');
const migration1Sql = require('./migration1.sql');
const migration2Sql = require('./migration2.sql');

export async function runMigrations(db: SQLite.SQLiteDatabase): Promise<void> {
    try {
        console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...');

        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π schema.sql
        console.log('üîß –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ö–µ–º—É...');
        await executeSqlFile(db, schemaSql);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        console.log('üîß –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 1...');
        await executeSqlFile(db, migration1Sql);

        console.log('üîß –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é 2...');
        await executeSqlFile(db, migration2Sql);

        console.log('üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
        console.error('üí• –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:', error);
        throw error;
    }
}

async function executeSqlFile(db: SQLite.SQLiteDatabase, sqlContent: string): Promise<void> {
    // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sqlContent
        .split(';')
        .map(cmd => cmd.trim())
        .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'));

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for (const command of commands) {
        try {
            await db.execAsync(command + ';');
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: ${command.substring(0, 100)}...`);
            console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
            throw error;
        }
    }
}